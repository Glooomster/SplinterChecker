<!-- HTML Section -->
<link href="/cssstyles/getdata.css" rel="stylesheet" />
@page "/getdata"

@using System.Net.Http
@using System.Diagnostics
@using Newtonsoft.Json
@using System.Linq
@using SplinterChecker.Models

<h1>Get Data from API</h1>

<label for="username">Username:</label>
<input type="text" id="username" @bind="Username" />

<button @onclick="FetchData">Get Data</button>

@if (DailyQuantities != null)
{
    <h3>Result:</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Username</th>
                <th>
                    Type
                    <select @onchange="FilterByType">
                        <option value="">All</option>
                        @foreach (var type in Types)
                        {
                            <option value="@type">@type</option>
                        }
                    </select>
                </th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dailyQuantity in DailyQuantities.Where(q => string.IsNullOrEmpty(SelectedType) || q.Type == SelectedType).OrderByDescending(q => q.Date))
            {
                <tr>
                    <td>@dailyQuantity.Date.ToShortDateString()</td>
                    <td>@dailyQuantity.Username</td>
                    <td>@dailyQuantity.Type</td>
                    <td>@Math.Round(dailyQuantity.Quantity, 2)</td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Main Code Section -->
@code {
    private const string ApiEndpoint = "https://splinterforge.io/users/getScTx";

    private bool IsLoaded { get; set; }

    private string Username { get; set; }
    private List<DailyQuantity> DailyQuantities { get; set; }
    private List<string> Types { get; set; }
    private string SelectedType { get; set; }

    private async Task FetchData()
    {
        try
        {
            using (var client = new HttpClient())
            {
                var response = await client.GetAsync($"{ApiEndpoint}?user={Username}");

                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    var transactions = JsonConvert.DeserializeObject<List<Transaction>>(content);

                    // Group transactions by username, type, and date
                    DailyQuantities = transactions
                        .GroupBy(t => new { t.Username, t.Type, Date = DateTime.Parse(t.Timestamp).Date })
                        .Select(g => new DailyQuantity { Date = g.Key.Date, Username = g.Key.Username, Type = g.Key.Type, Quantity = g.Sum(t => t.Qty) })
                        .ToList();

                    // Get list of unique types
                    Types = DailyQuantities.Select(q => q.Type).Distinct().OrderBy(t => t).ToList();

                    // Debugging output
                    Debug.WriteLine($"Response: {content}");
                    Debug.WriteLine($"DailyQuantities count: {DailyQuantities.Count}");

                    IsLoaded = true;
                }
                else
                {
                    throw new HttpRequestException($"Failed with status code {response.StatusCode}");
                }
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error: {ex.Message}");
        }
    }

    private void FilterByType(ChangeEventArgs e)
    {
        SelectedType = e.Value.ToString();
    }

}
